TITLE::CodexTemplater
summary::Create .scd files from templates of code
categories::Libraries>CodexIan
related::Classes/FileIncrementer, Classes/Composite
keyword::template, codexian, compositing, utilities, codexian utilities

DESCRIPTION::
CodexTemplater creates teletype::.scd:: files with code templates for the following classes:

list::
## link::Classes/SynthDef::
## link::Classes/Pattern::
## link::Classes/Function::
## link::Classes/Synth::
## link::Classes/Event::
## link::Classes/Array::
## link::Classes/List::
::

However, if a situation arises in which a composite needs templates from different objects or combinations of objects, like a function that returns an array of events, CodexTemplater can be easily link::#Extending CodexTemplater#extended::.

CodexTemplater was originally designed to work within the link::Classes/CodexComposite:: framework. To see it in action, refer to this link::Guides/CodexIan##guide::.
CLASSMETHODS::

method::new
Creates a new instance of CodexTemplater.

argument::folder
A string representing a path to the folder where templates will be stored.

private::modulePathString
private::moduleTemplateDir
private::makeTemplate
private::copyFile
private::firstToLower
private::targetCopy
private::templateDir
private::defaultPath

INSTANCEMETHODS::
method::makeTemplate
Copies a .scd file to the target folder with a defineable name from a source file. 
argument::templateName
A string representing the name of the template file to be made. 
argument::sourcePath
A string representing a path to a .scd file to be copied.
private::setTemplateDir
private::resetTemplateDir

method::folder
Gets and sets the string representing the path to the folder where templates are to be stored.

subsection::Templating methods
method::synthDef
Creates a template for a SynthDef object.

method::pattern
Creates a template for a Pattern object.

method::function
Creates a template for a Function object.

method::synth
Creates a template for a Synth object.

method::event
Creates a template for an Event object.

method::array
Creates a template for an Array object.

method::list
Creates a template for a List object.

method::blank
Creates an empty teletype::.scd:: file

EXAMPLES::

code::
(
var path, templater;

//1. Set up a path.
path = "~/Desktop/_templateTest".standardizePath.mkdir;

//2. Load the path into a CodexTemplater.
templater = CodexTemplater.new(path);

//3. Make templates for SynthDef.
templater.synthDef;
templater.synthDef("anotherSynthDef");

//4. Make templates for Function.
templater.function;
templater.function("anotherFunction");

//5. Inspect the file names.
//(Look at and delete the folder from the desktop too.)
PathName(path).files.do{|item|
	item.fileName.postln;
};
)

//6. Clean up.
File.deleteAll("~/Desktop/_templateTest".standardizePath);
::

If one tries to make a template at a location where a template with the same name already exists, the class automatically link::Classes/FileIncrementer##increments:: the name starting with 1.
code::
(
var path, templater;

//1. Set up a path.
path = "~/Desktop/_secondTemplateTest".standardizePath.mkdir;

//2. Load the path into a CodexTemplater.
templater = CodexTemplater.new(path);

//3. Make templates of a Patttern.
templater.pattern("dupTest");
templater.pattern("dupTest");
templater.pattern("dupTest");

//4. Inspect the file names.
PathName(path).files.do{|item|
	item.fileName.postln;
};
)

//5. Clean up.
File.deleteAll("~/Desktop/_secondTemplateTest".standardizePath);
::

anchor::ExtendingCodexTemplater::
section::Extending CodexTemplater 
Because situations may arise in which it is necessary to have templates for objects not defined by default, CodexTemplater can be easily made to template any arbitrary code. The method link::Classes/CodexTemplater#-makeTemplate#-makeTemplate:: does this by taking two argumentsâ€”the name of the template to be created and a string representing the path to template's the source file. That said, if you think the script being templated is of general use, write an extension for CodexTemplater to simplify this process. The following is an example of how to implement this: 
code:: 
+ CodexTemplater { 
	customTemplate { | templateName("custom") | 
		this.makeTemplate(templateName, "/Some/Folder/customTemplate.scd")
	}
}
::
