TITLE::CodexTemplater
summary::Create .scd files from templates of code. 
categories::Libraries>CodexIan
related::Classes/FileIncrementer, Classes/Composite
keyword:: template, codexian, compositing, utilities, codexian utilities

DESCRIPTION::
CodexTemplater creates emphasis::.scd:: files with code templates for the following classes: 

list::
	## link::Classes/SynthDef::
	## link::Classes/Pattern::
	## link::Classes/Function::
	## link::Classes/Synth:: 
	## link::Classes/Event::
	## link::Classes/Array::
::

However, if a situation arises in which a composite needs templates from different objects or combinations of objects, like a function that returns an array of events, CodexTemplater can be easily link::#Extending CodexTemplater#extended::.

CodexTemplater was originally designed to work within the link::Classes/Composite:: framework. To see it in action, refer to this link::Guides/MusicCompositing##guide::.
CLASSMETHODS::

method::new
Creates a new instance of CodexTemplater.

argument::moduleFolder
A string that refers to the folder in which templates will be generated. 

private::modulePathString
private::moduleTemplateDir
private::makeTemplate
private::copyFile
private::firstToLower
private::targetCopy
private::templateDir
private::defaultPath

INSTANCEMETHODS::
private::makeTemplate
method::setTemplateDir
Sets the path where the class looks for templates to copy. 
method::resetTemplateDir
Resets the path where the class looks for templates to copy to the default location.

method::path
Gets and sets the path where new templates are to be stored.

subsection::Templating methods
method::synthDef
Creates a template of a SynthDef object.

method::pattern
Creates a template of a Pattern object.

method::function
Creates a template of a Function object.

method::synth
Creates a template of a Synth object. 

method::event
Creates a template of an Event object. 

method::array 
Creates a template of an Array object. 

method::blank
Creates an empty emphasis::.scd:: file

EXAMPLES::

code::
(
var path, templater; 

//1. Set up a path.
path = "~/Desktop/_templateTest".standardizePath.mkdir; 

//2. Load the path into a CodexTemplater.
templater = CodexTemplater.new(path); 

//3. Make templates for SynthDef.
templater.synthDef; 
templater.synthDef("anotherSynthDef"); 

//4. Make templates for Function.
templater.function; 
templater.function("anotherFunction"); 

//5. Inspect the file names. 
//(Look at and delete the folder from the desktop too.)
PathName(path).files.do{|item|
	item.fileName.postln; 
}; 
)

//6. Clean up.
File.deleteAll("~/Desktop/_templateTest".standardizePath);
::

If one tries to make a template at a location where a template with the same name already exists, the class automatically link::Classes/FileIncrementer##increments:: the name starting with 1.
code::
(
var path, templater;

//1. Set up a path. 
path = "~Desktop/_secondTemplateTest".standardizePath.mkdir; 

//2. Load the path into a CodexTemplater.
templater = CodexTemplater.new(path); 

//3. Make templates of a Patttern. 
templater.pattern("dupTest"); 
templater.pattern("dupTest");
templater.pattern("dupTest");

//4. Inspect the file names. 
PathName(path).files.do{|item|
	item.fileName.postln;
}; 
)	

//5. Clean up. 
File.deleteAll("~/Desktop/_secondTemplateTest".standardizePath);
::
section::Extending CodexTemplater
Because sitautions may arise in which it is necessary to have templates for objects not defined by default, CodexTemplater can be easily extended to include new templates. The procedure for doing so requires two stepsâ€”writing a new template and writing an extension method for CodexTemplater that makes it.

By default, CodexTemplater looks for templates in the directory where the class is implemented. However, if new templates are written somewhere else, CodexTemplater must be directed to them. This is achieved via the method link::Classes/CodexTemplater#-setTemplateDir::. Once the class is set to look in the new folder, the targeted template can be made via link::Classes/CodexTemplater#-makeTemplate::. Subsequently, it is good practice to reset CodexTemplater back to its default state using link::Classes/CodexTemplater#-resetTemplateDir::. For convenience, these procedures are encapsulated by the method link::Classes/CodexTemplater#-makeExtTemplate::. As such, it is only necessary to call this method inside the extension. 

The following is an example of what this looks like.
code::
+ CodexTemplater { 

	//This method will generate a custom template from an external directory.
	customTemplate { | templateName("custom") | 
		this.makeExtTemplate(
			"Folder/With/New/Templates", 
			templateName, 
			"nameOfTemplateFile_NoExtension"
		);	
	}

}
::
