TITLE::CodexSonata
summary::Compose music with sequences of NodeProxy modules.
categories::Libraries>CodexIan>Frameworks
related::Classes/CodexSymphony, Classes/CodexMovement, Classes/CodexComposite
keyword::sonata, composition, codexian

DESCRIPTION::
CodexSonata defines a framework for making music that extends the procedures established by link::Classes/CodexComposite::. An instance of CodexSonata is responsible for sequencing those of its modules that contain functions whose code, in turn, manipulates link::Classes/NodeProxy##NodeProxies:: within a link::Classes/ProxySpace::. These modules hereafter will be referred to as sections. 

If a section returns a duration value, then after that many seconds the instance will advance to the next section. If no duration value is returned, then sections can be changed using the link::Classes/CodexSonata#-next#-next:: or link::Classes/CodexSonata#-previous#-previous:: methods. For more on this, review the comments in a copy of the teletype::codexSonata_section.scd:: template.

The durations of sections is managed by a link::Classes/Task:: that updates the field link::Classes/CodexSonata#-timeRemaining#-timeRemaining:: and also evaluates a function that can be registered with an instance using the link::Classes/CodexSonata#-onLoop#-onLoop:: setter. Moreover, at the completion of a section, the function registered with link::Classes/CodexSonata#-onLoopEnd#-onLoopEnd:: is also evaluated. In this way, an instance of CodexSonata can be set to control external objects, such as a GUI interface.

note::CodexSonata is an abstract class that should not be instanced. Use it to develop interesting things that take advantage of its procedures, and then instance those.::

CLASSMETHODS::

private::makeTemplates
private::otherTemplates
private::sectionTemplate

method::nSections
Returns an integer that specifies the number of sections within a sonata. A requirement for developing classes within this framework is that an integer is specified. Because CodexSonata itself returns teletype::nil:: here, it should not be instanced.

INSTANCEMETHODS::

private::initComposite
private::initSonata
private::moduleSet
private::engageTask

subsection::Section interface
method::start
Starts the piece of music, evaluating the first section. 
method::next
Advances to the next section.
method::previous
Returns to the previous section.
method::timeRemaining
The amount of time remaining in the current section. This will return teletype::nil:: if the section was specified without a duration.
method::sectionIndex
Gets the index of the section currently running in the class.
method::reset
Resets the sections of the object so that it can be started again.

subsection::Task management
The following methods are used to control the Task object held by the instance.

method::pause
Pauses the Task in the object if it is playing.
method::resume
Resumes the Task in the object if it is paused.
method::stop
Stops the Task in the obejct if it is playing.
method::isPlaying

private::task

subsection::Loop functionality
method::onLoop
argument::function 
A function that will be evaluated within the loop of the instance's Task. This function will be passed the current timeRemaining in the section.

method::onLoopEnd
argument::function 
A function that will be evaluated once the loop of the Task has been completed after the section's duration has elapsed.

method::loopDelta
The duration of time to spend in each loop.

subsection::ProxySpace-related methods
method::proxySpace
Gets and sets the instance of ProxySpace that manages the NodeProxies organized in the modular sections.

method::clear
Clears the ProxySpace

method::server
Gets the server help by the ProxySpace object.

private::cleanup

subsection::From CodexComposite
copymethod::CodexComposite -moduleSet
copymethod::CodexComposite -reloadScripts
copymethod::CodexComposite -reloadModules
copymethod::CodexComposite -openModule
copymethod::CodexComposite -openAll
