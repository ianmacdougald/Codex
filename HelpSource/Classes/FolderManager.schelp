CLASS::FolderManager
categories::Libraries>CodexIan>Utilities>Path Management
related::Classes/FileIncrementer, Classes/PathStorage
summary::Maintains and copies both folders and their contents.
keyword::codexian utilities, codexian, utilities, codexian path

DESCRIPTION::

FolderManager is a utility which allows for copying subfolders within a directory specified relatively or folders pointed to by absolute paths.

CLASSMETHODS::

method::new
Creates a new instance of FolderManager
argument::folder
A string which serves as the basis for recreating absolute paths from symbol keys that represent relative paths.

INSTANCEMETHODS::

method::mkdirCopy
Copies the files of one directory into a target directory, which is made if it does not already exist.
argument::from 
A relative or absolute path to the directory whose files are to be copied. 
argument::to
A relative or absolute path to the directory where the copied files should go.

method::copyFilesTo
Copies a collection of file paths to a target directory. 
argument::files
A collection of filepaths.
argument::targetDir
An absolute path to the directory where files should go.

method::folder
Gets and sets the absolute path to a folder for use with relative paths.

private::tagPath
private::copy
private::getFiles
private::tagPathExists

EXAMPLES::
code::
//1. Make an instance of FolderManager pointing to the Desktop folder.
f = FolderManager.new("~/Desktop".standardizePath);

(
//2. Make an arbitrary folder there and fill it with files.
~somePath = "~/Desktop/somePath".standardizePath.mkdir; 
~templater = Templater.new(~somePath); 
~templater.synthDef; 
~templater.event; 
~templater.function;
)

//3. Inspect the contents of the new directory.
PathName(~somePath).files.do({|item| item.fileName.postln});

//4. Copy the contents of that directory into another within the Desktop folder
//you can use a relative string or symbol or an absolute path. 
//Here, there is a mix of both.
f.mkdirCopy(~somePath, \another);

//5. Check to see that they're the same.
PathName(f.folder+/+"another").files.do({|item| item.fileName.postln});

//6. Cleanup.
File.deleteAll(~somePath);
File.deleteAll(f.folder+/+"another");
::
