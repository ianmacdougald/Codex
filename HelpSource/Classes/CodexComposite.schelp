TITLE::CodexComposite
summary::Abstract superclass of modularized composite classes
categories::Libraries>CodexIan
related::Classes/CodexHybrid, Guides/CodexIan
keyword::composite, compositing, codexian, composition

DESCRIPTION::
CodexComposite establishes a workflow both for developing and interacting with objects that are comprised of interconnected scriptable modules. The class organizes collections of modules within a directory that it maintains, providing a simple interface for manipulating these collectionsâ€”by loading them, unloading them, cloning them, and generating them from templates (see link::Classes/CodexTemplater::). In this way, each composite-typed class is free to focus on defining interesting behaviors for its respective modules rather than dealing with the pesky details of their storage and management.

note::CodexComposite should not be instantiated. Rather, it is meant to encapsulate behaviors on behalf of its subclasses. So instance those instead.
::

CLASSMETHODS::

method::new
Creates a new instance.

argument::moduleSet
A string or symbol representing a relative path or a string representing an absolute path to a folder of modules.
argument::from
A string or symbol representing a relative path or a string representing an absolute path to a folder to clone a new set of modules from.

method::directory
Gets and (persistently) sets the path to the directory of modules for all subclasses of CodexComposite. For further details, see link::Classes/CodexPaths::.
note::Before using a subclass of CodexComposite for the first time, be sure to configure the path to the directory of modules. This can be done either through the interface of CodexComposite or any of its subclasses. However, any change made will affect all subclasses of CodexComposite.
code::
//Check where the directory is.
CodexComposite.directory.postln;

//Replace this path with something you prefer.
CodexComposite.directory = "~/Documents/sc-modules".standardizePath;
::
::

private::defaultDirectory
private::checkDefaults

method::classFolder
Gets the path to the folder where all of the collections of modules for a given composite-typed class are stored.

method::moduleSets
Gets the names of the moduleSets that currently exist for the class.

method::cache
Gets a link::Classes/Dictionary:: of link::Classes/Event##Events:: storing sets of modules.
method::clearCache
Clears the dictionary of module sets, forcing the class to reload the modules from scripts the next time a given set is requested.
method::allCaches
Get the instance of link::Classes/CodexCache:: that stores all of the scripts of each subclass of CodexComposite.
private::addModules
private::asPath
private::copyFiles
private::copyModules
method::defaultsPath
Gets a string representing the path to a folder of default modules that ship with a class.
private::getModules
private::loadScripts
private::makeTemplates
private::notAt
private::processFolders
private::scriptKey
private::shouldAdd
private::template

INSTANCEMETHODS::
method::moduleFolder
Gets the path to the folder where the modules currently loaded into the instance are stored.

private::loadModules
private::initComposite

method::modules
Gets an link::Classes/Event:: containing the loaded modules.

method::reloadScripts
Reloads modules into the cache from scripts, and makes copies them into link::#-modules::.
method::reloadModules
Copies modules from the cache into link::#-modules::.

private::getModuleName

method::moduleSet
Gets and sets the current moduleSet.
argument::newSet
A symbol specifying the new set of modules to load. Setting moduleSet will in turn load the new resources.
argument::from
A symbol referring to an existing set of modules to copy if the new module name does not exist yet.


method::moduleSets
Gets the moduleSets that currently exist for the class.

method::openModules
Opens the files associated with the currently loaded modules into the current ide.

method::openModulesSCqt
Opens the files associated with the currently loaded modules from within emphasis::scqt::.

method::openModulesSCVim
Opens the files associated with the currently loaded modules in a vim-styled ide.
argument::shell
Specifies the shell to be used when opening vim.
argument::neovim
Boolean that declares whether neovim should be opened instead of vim.
argument::vertically
Boolean that declares whether many modules should be stacked vertically or horizontally.

private::name
