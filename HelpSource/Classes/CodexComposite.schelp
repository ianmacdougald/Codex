TITLE::CodexComposite
summary::Development platform for creating composite classes of scriptable objects.
categories::Libraries>CodexIan
related::Classes/CodexHybrid, Guides/CodexIan
keyword::composite, compositing, codexian, composition

DESCRIPTION::
CodexComposite establishes a workflow both for developing and interacting with objects that are comprised of interconnected scriptable modules. The class organizes collections of modules into folders within a directory that it maintains, and the class provides a simple interface for manipulating these collectionsâ€”by loading them, unloading them, cloning them, and generating them from templates (see link::Classes/CodexTemplater::). In this way, each composite-typed class is free to focus on defining interesting behaviors for its respective modules rather than dealing with the pesky details of their storage and organization. 

note::CodexComposite is a development tool that should not be instantiated. Rather, it is meant to encapsulate behaviors on behalf of its subclasses. So instance those instead.
::

CLASSMETHODS::

method::new
Creates a new instance.

argument::moduleSet
A symbol key representing the name of the set of modules to call. This key will correspond to a folder of modules within CodexComposite's directory.

argument::from
A symbol key representing the name of the folder to clone if the folder from moduleSet does not exist.

method::directory
Gets and (persistently) sets the path to the directory of modules for all subclasses of CodexComposite. For further details, see link::Classes/CodexPaths::.
note::Before using a subclass of CodexComposite for the first time, be sure to configure the path to the modules directory. This can be done either through the interface of CodexComposite or through those of any of its subclasses. Any change will affect all subclasses of CodexComposite. 
code::
CodexComposite.directory_("~/Documents/sc-modules".standardizePath);
::
::

private::defaultDirectory
private::checkDefaults

method::classFolder 
Gets the path to the folder where all of the collections of modules for a given composite-typed class are stored.

method::moduleSets
Gets the names of the moduleSets that currently exist for the given composite.

private::modules
private::addModules
private::asPath
private::copyFiles
private::copyModules
private::defaultModulesPath
private::getModules
private::loadScripts
private::makeTemplates
private::notAt
private::processFolders
private::scriptKey
private::shouldAdd
private::template

INSTANCEMETHODS::
method::moduleFolder
Gets the path to the folder where the modules currently loaded into the instance are stored.

private::loadModules
private::initComposite

method::modules
Gets an link::Classes/Event:: containing the loaded modules. 

method::reloadScripts
Reloads modules into the cache from scripts, and makes copies them into link::#-modules::. 
method::reloadModules
Copies modules from the cache into link::#-modules::.

private::getModuleName

method::moduleSet
Gets and sets the current moduleSet. 
argument::newSet
A symbol specifying the new set of modules to load. Setting moduleSet will in turn load the new resources. 

argument::from
A symbol referring to an existing set of modules to copy if the new module name does not exist yet.

private::name
